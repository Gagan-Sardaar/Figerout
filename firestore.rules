
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    // Users can only read/update their own profile. Admins can manage all.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId || isAdmin();
      // Only admins can create or delete user documents
      allow create, delete: if isAdmin();
    }

    // Users can only manage their own saved colors.
    match /users/{userId}/colors/{colorId} {
      allow read, list, create, update, delete: if request.auth.uid == userId;
    }

    // Users can only manage their own notifications.
    match /users/{userId}/notifications/{notificationId} {
        allow read, list, create, update, delete: if request.auth.uid == userId;
    }

    // Static pages can be read by anyone, but only written by admins.
    match /pages/{pageSlug} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Logs can only be created by authenticated users and read by admins.
    match /logs/{logId} {
      allow read, list: if isAdmin();
      allow create: if request.auth != null;
    }

    // Support tickets for account deletion etc.
    match /supportTickets/{ticketId} {
      // Admins can read and update any ticket.
      // Users can read/update their own tickets to check/cancel status.
      allow read, update: if isAdmin() || (request.auth != null && resource.data.userId == request.auth.uid);

      // Any authenticated user can create a ticket for themselves.
      // This also validates that the data being sent is for the user making the request.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

      // Only admins can delete tickets.
      allow delete: if isAdmin();
    }
  }
}
