rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the authenticated user is an Admin
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    // Helper function to check if the request is from the owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users Collection
    match /users/{userId} {
      // A user can read their own profile. Admins can read any profile.
      allow get: if isOwner(userId) || isAdmin();
      
      // Only Admins can list all users.
      allow list: if isAdmin();
      
      // A user can update their own name/phone. Admins can update any user's role/status.
      allow update: if (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'phoneNumber']))
                    || isAdmin();

      // User creation/deletion is blocked from the client for security.
      allow create, delete: if false;

      // Colors Subcollection
      match /colors/{colorId} {
        // A user can manage colors in their own collection. Admins can also manage.
        allow read, write, delete: if isOwner(userId) || isAdmin();
      }

      // Notifications Subcollection
      match /notifications/{notificationId} {
        // Users can read/update (mark as read) their own notifications.
        allow get, list: if isOwner(userId);
        allow update: if isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
        
        // Only Admins (or backend functions) can create notifications.
        allow create: if isAdmin();
        allow delete: if false;
      }
    }

    // Pages Collection (About Us, Privacy, etc.)
    match /pages/{pageSlug} {
      // Anyone can read public pages.
      allow get: if true;
      // Only admins can create or update pages.
      allow write: if isAdmin();
    }
    
    // Logs Collection
    match /logs/{logId} {
      // Anyone can create log entries (e.g., failed login attempts).
      allow create: if true; 
      // Only admins can read logs.
      allow read: if isAdmin();
      allow update, delete: if false;
    }
    
    // Security Collections
    match /failedLoginAttempts/{attemptId} {
      // Public write is needed to log an attempt before a user is authenticated.
      allow create: if true;
      allow read: if isAdmin();
      allow update, delete: if false;
    }
    
    match /loginLockouts/{email} {
      // Public read/write is needed for the login flow to check and set lockout state.
      allow get, write: if true;
      // Admins can delete a lockout document to reset it.
      // An authenticated user can clear their own lockout on successful login.
      allow delete: if isAuthenticated() || isAdmin();
    }
    
    // Support Tickets Collection
    match /supportTickets/{ticketId} {
        // User can read their own tickets. Admins can read all tickets.
        allow get: if (isAuthenticated() && resource.data.userId == request.auth.uid) || isAdmin();
        allow list: if isAdmin();

        // User can create their own ticket.
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;

        // User can update their own ticket to cancel it. Admins can update any ticket.
        allow update: if (isAuthenticated() && resource.data.userId == request.auth.uid && request.resource.data.status == 'cancelled')
                      || isAdmin();
        
        allow delete: if false;
    }
  }
}
