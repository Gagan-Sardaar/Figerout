
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ======== Helper Functions ========
    function isSignedIn() {
      return request.auth != null;
    }
    
    function getUserRole() {
      // Gracefully handle cases where the user document might not exist yet.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isAdmin() {
      return isSignedIn() && getUserRole() == 'Admin';
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // ======== Default Security ========
    // By default, deny all reads and writes.
    match /{document=**} {
      allow read, write: if false;
    }
    
    // ======== User Profiles ========
    match /users/{userId} {
      allow get: if true;
      allow list: if isAdmin();
      allow create: if isAdmin(); // Only admins can create users for now.
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // ======== User Subcollections ========
    // Covers user's saved colors and notifications.
    match /users/{userId}/{userCollection}/{docId} {
        allow read, write, delete: if isOwner(userId);
    }
    
    // ======== Static Pages ========
    // Covers About Us, Privacy Policy, etc.
    match /pages/{pageSlug} {
        allow get: if true; // Anyone can read static content.
        allow list: if true;
        allow create, update, delete: if isAdmin();
    }

    // ======== Support Tickets ========
    // For account deletion requests.
    match /supportTickets/{ticketId} {
      // Users can read their own tickets, Admins can read any.
      allow get: if isSignedIn() && (isOwner(resource.data.userId) || isAdmin());
      // Only Admins can list all tickets.
      allow list: if isAdmin();
      // Users can create a ticket for themselves.
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      // Only Admins can update a ticket's status.
      allow update: if isAdmin();
      // No one can delete tickets, they are kept for records.
      allow delete: if false;
    }
    
    // ======== General Application Logs ========
    match /logs/{logId} {
      allow get, list: if isAdmin();
      // Any signed-in user can write logs (e.g., from client-side events).
      // For production, this should be restricted to server-side calls.
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
    
    // ======== Login Security System ========
    // NOTE: The following rules are permissive to allow the client-side security implementation.
    // In a production environment, this logic should be moved to a secure Cloud Function.

    match /loginLockouts/{email} {
      // The login page needs to read and write to this collection *before* authentication.
      allow read, write: if true;
      // Admins (when logged in) can reset lockouts, which is a delete operation.
      allow delete: if isAdmin();
    }

    match /failedLoginAttempts/{attemptId} {
      // Admins can read the failed attempts for the security dashboard.
      allow get, list: if isAdmin();
      // The login page needs to write to this collection *before* authentication.
      allow create: if true;
      // Logs are immutable.
      allow update, delete: if false;
    }
  }
}
