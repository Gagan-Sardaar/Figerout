
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is an Admin.
    // It reads the user's own profile from the /users collection.
    function isRequestingUserAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    // Rules for the users collection
    match /users/{userId} {
      // Allow read access to a user's own document, or if the requester is an admin.
      allow read: if request.auth != null && (request.auth.uid == userId || isRequestingUserAdmin());
      
      // Allow an admin to update any user document.
      // A user can also update their own document, but cannot change their role.
      allow update: if request.auth != null && ((request.auth.uid == userId && request.resource.data.role == resource.data.role) || isRequestingUserAdmin());

      // User creation should be handled via secure backend functions, not direct client writes.
      allow create: if false;

      // Only admins can delete users.
      allow delete: if request.auth != null && isRequestingUserAdmin();
    }
    
    // Rules for a user's saved colors
    match /users/{userId}/colors/{colorId} {
      // A user can read, write, and delete their own saved colors.
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for static content pages (e.g., about, privacy)
    match /pages/{pageSlug} {
      // Anyone can read public pages.
      allow read: if true;
      
      // Only admins can write to pages.
      allow write: if request.auth != null && isRequestingUserAdmin();
    }
  }
}
